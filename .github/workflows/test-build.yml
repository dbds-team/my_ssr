name: Test Build

on:
  workflow_dispatch: # 仅允许手动触发
    inputs:
      debug_level:
        description: '调试级别 (basic/detailed/full)'
        required: false
        default: 'basic'
        type: choice
        options:
          - basic
          - detailed  
          - full
      test_signing:
        description: '测试签名功能'
        required: false
        default: false
        type: boolean

jobs:
  test-build:
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    
    env:
      NDK_VERSION: android-ndk-r12b
      SDK_TOOLS: 4333796
      SCALA_VERSION: scala-2.11.8
      
    steps:
    - name: 🔍 环境信息
      run: |
        echo "🔍 测试构建开始"
        echo "📋 构建环境信息:"
        echo "  运行器: $(uname -a)"
        echo "  调试级别: ${{ github.event.inputs.debug_level }}"
        echo "  测试签名: ${{ github.event.inputs.test_signing }}"
        echo "  触发事件: ${{ github.event_name }}"
        echo "  工作目录: $(pwd)"
        
    - name: 📥 Checkout代码
      uses: actions/checkout@v4
      
    - name: 🔍 代码库检查
      run: |
        echo "📋 代码库基本信息:"
        echo "  分支: $(git branch --show-current || echo '未知')"
        echo "  最新提交: $(git log -1 --oneline || echo '无提交')"
        echo "  项目根目录文件:"
        ls -la
        
        echo "📋 构建文件检查:"
        echo "  build.sbt: $([ -f build.sbt ] && echo '✅' || echo '❌')"
        echo "  build.sh: $([ -f build.sh ] && echo '✅' || echo '❌')"
        echo "  travis-ci/setup.sh: $([ -f travis-ci/setup.sh ] && echo '✅' || echo '❌')"
        
    - name: ☕ 设置JDK 1.8
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: '8'
        
    - name: 🔍 Java环境检查
      run: |
        echo "☕ Java环境信息:"
        java -version
        javac -version
        echo "JAVA_HOME: $JAVA_HOME"
        
    - name: 🔧 恢复Android缓存
      uses: actions/cache@v4
      with:
        path: ~/.android-cache
        key: test-${{ runner.os }}-android-${{ env.NDK_VERSION }}-${{ env.SDK_TOOLS }}-${{ env.SCALA_VERSION }}
        restore-keys: |
          test-${{ runner.os }}-android-${{ env.NDK_VERSION }}-${{ env.SDK_TOOLS }}
          ${{ runner.os }}-android-${{ env.NDK_VERSION }}-${{ env.SDK_TOOLS }}
          
    - name: 🔧 恢复SBT缓存
      uses: actions/cache@v4
      with:
        path: |
          ~/.ivy2/cache
          ~/.sbt
        key: test-${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
        restore-keys: |
          test-${{ runner.os }}-sbt-
          ${{ runner.os }}-sbt-
          
    - name: 🏗️ 安装Scala (详细模式)
      run: |
        echo "📦 安装Scala ${{ env.SCALA_VERSION }}..."
        mkdir -p ~/.android-cache
        
        if [ ! -f ~/.android-cache/scala-2.11.8.deb ]; then
          echo "⬇️ 下载Scala包..."
          wget -O ~/.android-cache/scala-2.11.8.deb https://www.scala-lang.org/files/archive/scala-2.11.8.deb
          echo "📦 下载的文件大小: $(ls -lh ~/.android-cache/scala-2.11.8.deb | awk '{print $5}')"
        else
          echo "✅ 使用缓存的Scala包"
          echo "📦 缓存文件大小: $(ls -lh ~/.android-cache/scala-2.11.8.deb | awk '{print $5}')"
        fi
        
        echo "🔧 安装Scala包..."
        sudo dpkg -i ~/.android-cache/scala-2.11.8.deb
        
        echo "🔍 验证Scala安装:"
        scala -version || echo "❌ Scala版本检查失败"
        echo "✅ Scala安装完成"
        
    - name: 🏗️ 安装SBT (详细模式)
      run: |
        echo "📦 安装SBT..."
        echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
        
        echo "🔐 添加SBT GPG密钥..."
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823
        
        echo "🔄 更新包索引..."
        sudo apt-get update -qq
        
        echo "📦 安装SBT包..."
        sudo apt-get install -y sbt
        
        echo "🔍 验证SBT安装:"
        sbt --version || echo "❌ SBT版本检查失败"
        echo "✅ SBT安装完成"
        
    - name: 🏗️ 安装构建依赖
      run: |
        echo "📦 安装构建依赖..."
        sudo apt-get --quiet install --yes wget tar unzip gcc-multilib g++-multilib libstdc++6 libgcc1 zlib1g libncurses5
        
        echo "🔍 验证依赖安装:"
        gcc --version | head -1
        g++ --version | head -1
        echo "✅ 依赖安装完成"
        
    - name: 🔧 初始化Application.mk
      run: |
        echo "📝 创建Application.mk配置..."
        echo -e "APP_ABI      			:= armeabi-v7a x86\nAPP_PLATFORM 			:= android-16\nAPP_STL      			:= stlport_static\nNDK_TOOLCHAIN_VERSION 	:= clang\n" > './src/main/jni/Application.mk'
        
        echo "📋 Application.mk内容:"
        cat './src/main/jni/Application.mk'
        echo "✅ Application.mk创建完成"
        
    - name: 🔐 测试签名配置
      if: ${{ github.event.inputs.test_signing == 'true' }}
      env:
        KEY_JKS: ${{ secrets.KEY_JKS }}
        ALIAS: ${{ secrets.ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
      run: |
        echo "🔐 测试签名配置..."
        
        if [ -z "$KEY_JKS" ]; then
          echo "❌ KEY_JKS secret未配置"
        else
          echo "✅ KEY_JKS secret已配置 (长度: ${#KEY_JKS})"
        fi
        
        if [ -z "$ALIAS" ]; then
          echo "❌ ALIAS secret未配置"
        else
          echo "✅ ALIAS secret已配置: $ALIAS"
        fi
        
        if [ -z "$ANDROID_KEY_PASSWORD" ]; then
          echo "❌ ANDROID_KEY_PASSWORD secret未配置"
        else
          echo "✅ ANDROID_KEY_PASSWORD secret已配置"
        fi
        
        if [ -z "$ANDROID_STORE_PASSWORD" ]; then
          echo "❌ ANDROID_STORE_PASSWORD secret未配置"
        else
          echo "✅ ANDROID_STORE_PASSWORD secret已配置"
        fi
        
        # 如果所有secrets都配置了，测试解码证书
        if [ -n "$KEY_JKS" ] && [ -n "$ALIAS" ] && [ -n "$ANDROID_KEY_PASSWORD" ] && [ -n "$ANDROID_STORE_PASSWORD" ]; then
          echo "🔧 测试证书解码..."
          echo "$KEY_JKS" | base64 --decode > test-key.jks 2>/dev/null
          if [ $? -eq 0 ]; then
            echo "✅ 证书解码成功"
            echo "📦 证书文件大小: $(ls -lh test-key.jks | awk '{print $5}')"
            rm test-key.jks
          else
            echo "❌ 证书解码失败"
          fi
        fi
        
    - name: 🔍 预构建检查
      run: |
        echo "🔍 构建前环境检查..."
        
        echo "📋 关键目录检查:"
        echo "  src/main存在: $([ -d src/main ] && echo '✅' || echo '❌')"
        echo "  src/main/jni存在: $([ -d src/main/jni ] && echo '✅' || echo '❌')"
        echo "  travis-ci存在: $([ -d travis-ci ] && echo '✅' || echo '❌')"
        
        echo "📋 关键文件检查:"
        echo "  build.sbt: $([ -f build.sbt ] && echo '✅' || echo '❌')"
        echo "  build.sh: $([ -f build.sh ] && echo '✅' || echo '❌')"
        echo "  Application.mk: $([ -f src/main/jni/Application.mk ] && echo '✅' || echo '❌')"
        echo "  setup.sh: $([ -f travis-ci/setup.sh ] && echo '✅' || echo '❌')"
        
        if [ "${{ github.event.inputs.debug_level }}" = "detailed" ] || [ "${{ github.event.inputs.debug_level }}" = "full" ]; then
          echo "📋 详细文件列表:"
          echo "  src/main/jni内容:"
          ls -la src/main/jni/ | head -10
          echo "  travis-ci内容:"
          ls -la travis-ci/
        fi
        
    - name: 🚀 测试构建 (基础)
      if: ${{ github.event.inputs.debug_level == 'basic' }}
      run: |
        echo "🚀 开始基础测试构建..."
        chmod +x ./travis-ci/setup.sh
        
        # 设置超时和错误处理
        timeout 1800 ./travis-ci/setup.sh || {
          echo "❌ 构建失败或超时"
          exit 1
        }
        
        echo "✅ 基础构建测试完成"
        
    - name: 🚀 测试构建 (详细)
      if: ${{ github.event.inputs.debug_level == 'detailed' }}
      run: |
        echo "🚀 开始详细测试构建..."
        chmod +x ./travis-ci/setup.sh
        
        echo "📋 构建脚本内容预览:"
        head -20 ./travis-ci/setup.sh
        
        # 详细模式构建
        timeout 1800 bash -x ./travis-ci/setup.sh || {
          echo "❌ 详细构建失败或超时"
          echo "📋 最后的目录状态:"
          find . -name "*.apk" -o -name "*.log" | head -10
          exit 1
        }
        
        echo "✅ 详细构建测试完成"
        
    - name: 🚀 测试构建 (完整)
      if: ${{ github.event.inputs.debug_level == 'full' }}
      run: |
        echo "🚀 开始完整测试构建..."
        chmod +x ./travis-ci/setup.sh
        
        echo "📋 完整构建脚本内容:"
        cat ./travis-ci/setup.sh
        
        echo "📋 开始构建，启用完整调试..."
        # 完整调试模式
        set -x
        timeout 1800 ./travis-ci/setup.sh || {
          echo "❌ 完整构建失败或超时"
          echo "📋 构建环境状态:"
          env | grep -E "(ANDROID|JAVA|SBT|SCALA)" | sort
          echo "📋 文件搜索结果:"
          find . -name "*.apk" -o -name "*.log" -o -name "target" | head -20
          exit 1
        }
        set +x
        
        echo "✅ 完整构建测试完成"
        
    - name: 📁 构建结果检查
      run: |
        echo "📁 构建结果检查..."
        
        echo "📋 查找APK文件:"
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          echo "  发现APK: $apk ($(ls -lh "$apk" | awk '{print $5}'))"
        done
        
        echo "📋 target目录结构:"
        if [ -d target ]; then
          find target -type f -name "*.apk" -o -name "*.log" | head -10
        else
          echo "  target目录不存在"
        fi
        
        echo "📋 输出目录检查:"
        if [ -d ./target/android/output/ ]; then
          echo "  输出目录存在，内容:"
          ls -la ./target/android/output/
        else
          echo "  输出目录不存在"
        fi
        
    - name: 📦 上传测试结果
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-build-results-${{ github.run_number }}
        path: |
          target/android/output/*.apk
          **/*.log
        retention-days: 7
        if-no-files-found: ignore
        
    - name: 🎊 测试完成
      run: |
        echo "🎊 测试构建完成!"
        echo "📋 测试总结:"
        echo "  调试级别: ${{ github.event.inputs.debug_level }}"
        echo "  签名测试: ${{ github.event.inputs.test_signing }}"
        echo "  构建状态: $([ $? -eq 0 ] && echo '成功' || echo '失败')"
        echo "📝 如果构建失败，请检查上传的artifacts获取详细日志" 