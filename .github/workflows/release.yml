name: Build and Release

on:
  push:
    tags:
      - 'v*' # 只有推送带v的tag时才触发编译和发布
  workflow_dispatch: # 允许手动触发

jobs:
  build-and-release:
    runs-on: ubuntu-22.04
    timeout-minutes: 60 # 设置超时避免卡住
    
    env:
      NDK_VERSION: android-ndk-r12b
      SDK_TOOLS: 4333796
      SCALA_VERSION: scala-2.11.8
      
    steps:
    - name: 📥 Checkout代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # 获取完整历史用于生成changelog
        
    - name: 📋 获取版本信息
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "📌 构建版本: $VERSION"
        
    - name: ☕ 设置JDK 1.8
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: '8'
        
    - name: 🔧 恢复Android缓存
      uses: actions/cache@v4
      with:
        path: ~/.android-cache
        key: ${{ runner.os }}-android-${{ env.NDK_VERSION }}-${{ env.SDK_TOOLS }}-${{ env.SCALA_VERSION }}
        restore-keys: |
          ${{ runner.os }}-android-${{ env.NDK_VERSION }}-${{ env.SDK_TOOLS }}
          
    - name: 🔧 恢复SBT ivy缓存
      uses: actions/cache@v4
      with:
        path: ~/.ivy2/cache
        key: ${{ runner.os }}-sbt-ivy-cache-${{ hashFiles('**/build.sbt') }}
        restore-keys: |
          ${{ runner.os }}-sbt-ivy-cache-
          
    - name: 🔧 恢复SBT缓存
      uses: actions/cache@v4
      with:
        path: ~/.sbt
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
        restore-keys: |
          ${{ runner.os }}-sbt-
          
    - name: 🏗️ 安装Scala
      run: |
        echo "📦 安装Scala ${{ env.SCALA_VERSION }}..."
        mkdir -p ~/.android-cache
        if [ ! -f ~/.android-cache/scala-2.11.8.deb ]; then
          echo "⬇️ 下载Scala包..."
          wget -O ~/.android-cache/scala-2.11.8.deb https://www.scala-lang.org/files/archive/scala-2.11.8.deb
        else
          echo "✅ 使用缓存的Scala包"
        fi
        sudo dpkg -i ~/.android-cache/scala-2.11.8.deb
        echo "✅ Scala安装完成"
        
    - name: 🏗️ 安装SBT
      run: |
        echo "📦 安装SBT..."
        echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
        echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
        curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add
        sudo apt-get update -qq
        sudo apt-get install -y sbt
        echo "✅ SBT安装完成"
        
    - name: 🏗️ 安装依赖包
      run: |
        echo "📦 安装构建依赖..."
        sudo apt-get --quiet install --yes wget tar unzip gcc-multilib g++-multilib libstdc++6 libgcc1 zlib1g libncurses5
        echo "✅ 依赖安装完成"
        
    - name: 🔧 初始化Application.mk
      run: |
        echo "📝 创建Application.mk配置..."
        echo -e "APP_ABI      			:= armeabi-v7a x86\nAPP_PLATFORM 			:= android-16\nAPP_STL      			:= stlport_static\nNDK_TOOLCHAIN_VERSION 	:= clang\n" > './src/main/jni/Application.mk'
        echo "✅ Application.mk创建完成"
        cat './src/main/jni/Application.mk'
        
    - name: 🔐 设置签名密钥
      if: ${{ env.KEY_JKS != '' }}
      env:
        KEY_JKS: ${{ secrets.KEY_JKS }}
        ALIAS: ${{ secrets.ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
      run: |
        echo "🔐 配置APK签名..."
        # 解码证书文件
        echo "$KEY_JKS" | base64 --decode > release-key.jks
        echo "✅ 签名密钥配置完成"
        
        # 创建签名配置文件
        echo "storeFile=../release-key.jks" > local.properties
        echo "storePassword=$ANDROID_STORE_PASSWORD" >> local.properties
        echo "keyAlias=$ALIAS" >> local.properties
        echo "keyPassword=$ANDROID_KEY_PASSWORD" >> local.properties
        echo "✅ 签名配置文件创建完成"
        
    - name: 🏗️ 构建APK
      run: |
        echo "🚀 开始构建Release APK..."
        echo "📋 构建信息:"
        echo "  版本: ${{ steps.version.outputs.version }}"
        echo "  项目: shadowsocksr-v2ray"
        echo "  目标: release"
        
        # 设置构建环境
        chmod +x ./travis-ci/setup.sh
        ./travis-ci/setup.sh
        
        echo "✅ APK构建完成"
        
    - name: 📁 检查构建结果
      run: |
        echo "📋 构建输出目录内容:"
        ls -la ./target/android/output/ || echo "输出目录不存在"
        
        echo "📋 查找APK文件:"
        find . -name "*.apk" -type f | head -10
        
    - name: 📝 重命名APK文件
      id: rename
      run: |
        echo "📝 重命名APK文件..."
        cd ./target/android/output/
        
        # 查找release apk文件
        if [ -f "shadowsocksr-v2ray-release.apk" ]; then
          OLD_NAME="shadowsocksr-v2ray-release.apk"
        elif [ -f "app-release.apk" ]; then
          OLD_NAME="app-release.apk"
        else
          echo "❌ 未找到release APK文件"
          ls -la
          exit 1
        fi
        
        # 新文件名: 项目名+版本号+.apk
        NEW_NAME="shadowsocksr-v2ray-${{ steps.version.outputs.version }}.apk"
        
        mv "$OLD_NAME" "$NEW_NAME"
        echo "✅ APK文件重命名: $OLD_NAME -> $NEW_NAME"
        echo "apk_name=$NEW_NAME" >> $GITHUB_OUTPUT
        echo "apk_path=$(pwd)/$NEW_NAME" >> $GITHUB_OUTPUT
        
        # 显示最终文件信息
        ls -lh "$NEW_NAME"
        
    - name: 📦 上传APK到Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: shadowsocksr-v2ray-${{ steps.version.outputs.version }}
        path: ${{ steps.rename.outputs.apk_path }}
        retention-days: 30
        
    - name: 📊 生成Release说明
      id: changelog
      run: |
        echo "📊 生成Release说明..."
        
        # 获取上一个tag
        PREV_TAG=$(git tag --sort=-version:refname | grep "^v" | head -2 | tail -1)
        if [ -z "$PREV_TAG" ]; then
          PREV_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        echo "🔍 对比范围: $PREV_TAG..${{ steps.version.outputs.version }}"
        
        # 生成changelog
        cat > release_notes.md << EOF
        ## 🚀 ShadowsocksR V2Ray ${{ steps.version.outputs.version }}
        
        ### 📋 版本信息
        - **版本号**: ${{ steps.version.outputs.version }}
        - **构建时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')
        - **构建分支**: ${GITHUB_REF#refs/tags/}
        
        ### 📦 下载信息
        - **APK文件**: ${{ steps.rename.outputs.apk_name }}
        - **文件大小**: $(ls -lh ${{ steps.rename.outputs.apk_path }} | awk '{print $5}')
        
        ### 📝 更新内容
        EOF
        
        # 添加提交历史
        git log --pretty=format:"- %s (%h)" $PREV_TAG..${{ steps.version.outputs.version }} >> release_notes.md
        
        echo "✅ Release说明生成完成"
        cat release_notes.md
        
    - name: 🎉 创建GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ShadowsocksR V2Ray ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: ${{ steps.rename.outputs.apk_path }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'rc') }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🎊 构建完成
      run: |
        echo "🎊 构建和发布完成!"
        echo "📦 APK文件: ${{ steps.rename.outputs.apk_name }}"
        echo "🔗 Release链接: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" 